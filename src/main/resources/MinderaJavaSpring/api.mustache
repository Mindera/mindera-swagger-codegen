package {{package}};

{{#imports}}import {{import}};
{{/imports}}

{{#async}}import java.util.concurrent.CompletionStage;
import static java.util.concurrent.CompletableFuture.completedFuture;{{/async}}{{^async}}import java.util.concurrent.Callable;{{/async}}

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;

import static org.springframework.http.MediaType.*;

{{>generatedAnnotation}}
{{#operations}}
@Controller
public interface {{classname}} {
{{#operation}}

    @RequestMapping(value = "{{{path}}}",{{#singleContentTypes}}
        produces = "{{{vendorExtensions.x-accepts}}}",
        consumes = "{{{vendorExtensions.x-contentType}}}",{{/singleContentTypes}}{{^singleContentTypes}}{{#hasProduces}}
        produces = { {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }, {{/hasProduces}}{{#hasConsumes}}
        consumes = { {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} },{{/hasConsumes}}{{/singleContentTypes}}
        method = RequestMethod.{{httpMethod}})
    {{#isCorsEnabled}}
    @CrossOrigin(methods = RequestMethod.{{httpMethod}})
    {{/isCorsEnabled}}
    default {{#vendorExtensions.x-returnTypeOverride}}{{{type}}}{{/vendorExtensions.x-returnTypeOverride}}{{^vendorExtensions.x-returnTypeOverride}}{{#async}}CompletionStage{{/async}}{{^async}}Callable{{/async}}<ResponseEntity<{{>returnTypes}}>>{{/vendorExtensions.x-returnTypeOverride}} {{operationId}}({{#allParams}}{{#hasMore}}
                                    {{/hasMore}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},{{/hasMore}}{{/allParams}}) {
        // do some magic
        {{#vendorExtensions.x-returnTypeOverride}}return null;{{/vendorExtensions.x-returnTypeOverride}}{{^vendorExtensions.x-returnTypeOverride}}{{#async}}return completedFuture(new ResponseEntity<{{>returnTypes}}>(HttpStatus.OK));{{/async}}
        {{^async}}return () -> new ResponseEntity<{{>returnTypes}}>(HttpStatus.OK);{{/async}}{{/vendorExtensions.x-returnTypeOverride}}
    }
{{/operation}}
}
{{/operations}}
