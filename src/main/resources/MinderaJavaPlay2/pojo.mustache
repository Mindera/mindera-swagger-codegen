/**
 * {{#description}}{{.}}{{/description}}{{^description}}{{classname}}{{/description}}
 */
{{>generatedAnnotation}}
public class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{{#serializableModel}}implements Serializable {{/serializableModel}}{
    {{#vars}}
        {{#isEnum}}
        {{^isContainer}}
{{>modelInnerEnum}}
        {{/isContainer}}
        {{/isEnum}}
        {{#items.isEnum}}
            {{#items}}
            {{^isContainer}}
{{>modelInnerEnum}}
            {{/isContainer}}
            {{/items}}
        {{/items.isEnum}}
    private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
    {{/vars}}

    public {{classname}}() {} {{^parent}}

    public {{classname}}({{#vars}}{{{datatypeWithEnum}}} {{name}}{{#hasMore}},
        {{/hasMore}}{{/vars}}) { {{#vars}}
        this.{{name}} = {{name}};{{/vars}}
    } {{/parent}}

    protected {{classname}}(GenericBuilder builder) { {{#parent}}
        super(builder);{{/parent}}{{#vars}}
        this.{{name}} = builder.{{name}};{{/vars}}
    }

    {{#vars}}/**{{#description}}
        * {{{description}}}{{/description}}{{#minimum}}
        * minimum: {{minimum}}{{/minimum}}{{#maximum}}
        * maximum: {{maximum}}{{/maximum}}
    **/
    {{#vendorExtensions.extraAnnotation}}
        {{vendorExtensions.extraAnnotation}}
    {{/vendorExtensions.extraAnnotation}}
    @JsonProperty("{{baseName}}")
    public {{{datatypeWithEnum}}} {{getter}}() {
        return {{name}};
    }

    @JsonProperty("{{baseName}}")
    private void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{name}} = {{name}};
    }

    {{/vars}}@Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }{{#parent}}
        if (!super.equals(o)) {
            return false;
        }{{/parent}}
        {{classname}} {{classVarName}} = ({{classname}}) o;{{#hasVars}}
        return {{#vars}}Objects.equals(this.{{name}}, {{classVarName}}.{{name}}){{#hasMore}} &&
            {{/hasMore}}{{^hasMore}};{{/hasMore}}{{/vars}}{{/hasVars}}{{^hasVars}}
        return true;{{/hasVars}}
    }

    @Override
    public int hashCode() {
        return Objects.hash({{#parent}}super.hashCode(){{#hasVars}}, {{/hasVars}}{{/parent}}{{#vars}}{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}});
    }

    @Override
    public String toString()  {
        StringBuilder sb = new StringBuilder();
        sb.append("class {{classname}} {\n");{{#parent}}
        sb.append("  " + super.toString()).append("\n");{{/parent}}
        {{#vars}}sb.append("  {{name}}: ").append({{name}}).append("\n");
        {{/vars}}sb.append("}\n");
        return sb.toString();
    }

    @SuppressWarnings("unchecked")
    protected static class GenericBuilder<T extends GenericBuilder<T>> {{#parent}}extends {{{parent}}}.GenericBuilder<T> {{/parent}}{

        {{#vars}}
        protected {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
        {{/vars}}

        {{#vars}}{{^isReadOnly}}{{#required}}
        {{/required}}public T {{vendorExtensions.builder}}({{{datatypeWithEnum}}} {{name}}) { {{#required}}
            Objects.requireNonNull({{name}});{{/required}}
            this.{{name}} = {{name}};
            return (T)this;
        }

        {{/isReadOnly}}{{/vars}}
    }

    public static class Builder extends GenericBuilder<Builder> {

        public {{classname}} build() {
            return new {{classname}}(this);
        }
    }
}